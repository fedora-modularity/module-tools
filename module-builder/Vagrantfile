# -*- mode: ruby -*-
# vi: set ft=ruby :


# The provisioning scripts catch some commands' non-zero exit codes to cope
# with subsequent runs.

$root_script = <<'EOF'
dnf -y update
dnf -y install git make pkgwat

# make sure we stick to py2 for everything
dnf -y --enablerepo=updates-testing install module-build-service python2-modulemd python2-pdc-client

dnf -y install --allowerasing \
    https://kojipkgs.fedoraproject.org//packages/mock/1.3.4/1.fc26/noarch/mock{,-lvm,-scm}-1.3.4-1.fc26.noarch.rpm

# add docker for using the boltron-preview to test
dnf -y install docker atomic

systemctl stop docker >& /dev/null || :
groupadd docker >& /dev/null || :

usermod -a -G docker vagrant
systemctl enable docker && systemctl start docker

chown root:docker /var/run/docker.sock
docker pull modularitycontainers/boltron-preview

usermod -a -G mock vagrant

# enable depchase and other modularity tools
dnf -y install python3-solv python3-click fedora-packager
EOF

$user_script = <<'EOF'
mkdir ~/modularity-tools/ >&/dev/null || :
git clone https://github.com/fedora-modularity/baseruntime-package-lists.git ~/modularity-tools/baseruntime-package-lists >& /dev/null || :
git clone https://github.com/fedora-modularity/depchase.git ~/modularity-tools/depchase >& /dev/null || :
cd ~/modularity-tools/depchase && git checkout verbose
EOF


Vagrant.configure(2) do |config|
  config.vm.box = "fedora/26-cloud-base"
  config.vm.define :vagrant_module_builder do |vagrant_host|
    vagrant_host.vm.provider :libvirt do |domain|
      domain.cpus = 4
      # cap guest size at RAM / 4, max 16GB
      host_memory = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024
      guest_memory = host_memory / 4
      if guest_memory > 16384
          guest_memory = 16384
      end
      domain.memory = guest_memory
    end

    vagrant_host.vm.provision "shell", inline: $root_script, privileged: true
    vagrant_host.vm.provision "shell", inline: $user_script, privileged: false
  end
end
