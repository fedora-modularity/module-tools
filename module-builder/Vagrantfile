# -*- mode: ruby -*-
# vi: set ft=ruby :


# The provisioning scripts catch some commands' non-zero exit codes to cope
# with subsequent runs.

$root_script = <<'EOF'
dnf -y update
dnf -y install git make pkgwat

# make sure we stick to py2 for everything
dnf -y --enablerepo=updates-testing install module-build-service python2-modulemd python2-pdc-client

dnf -y install --allowerasing \
    https://kojipkgs.fedoraproject.org//packages/mock/1.3.4/1.fc26/noarch/mock{,-lvm,-scm}-1.3.4-1.fc26.noarch.rpm

# add docker for using the boltron-preview to test
dnf -y install docker atomic
groupadd docker >& /dev/null || :
sed -i \
    -e "s|--group=docker ||" \
    -e "s|^OPTIONS=\(['\"]\)|OPTIONS=\1--group=docker |" \
    /etc/sysconfig/docker

systemctl enable docker
systemctl restart docker

docker pull modularitycontainers/boltron-preview

# enable depchase and other modularity tools
dnf -y install python3-solv python3-click fedora-packager

usermod -a -G mock,docker vagrant
EOF

$user_script = <<'EOF'
mkdir ~/modularity-tools/ >&/dev/null || :
git clone https://github.com/fedora-modularity/baseruntime-package-lists.git ~/modularity-tools/baseruntime-package-lists >& /dev/null || :
git clone https://github.com/fedora-modularity/depchase.git ~/modularity-tools/depchase >& /dev/null || :
cd ~/modularity-tools/depchase && git checkout verbose
EOF


class ::Hash
  def deep_merge(second)
    deep_merger = proc { |key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &deep_merger) : v2 }
    return self.merge(second, &deep_merger)
  end

  def deep_merge!(second)
    self.replace(self.deep_merge(second))
  end
end


require 'yaml'
dir = File.dirname(File.expand_path(__FILE__))

config_doc = YAML::load_file("#{dir}/defaults.yaml")

if File.exist?("#{dir}/config.yaml")
  local_doc = YAML::load_file("#{dir}/config.yaml")
  config_doc.deep_merge! local_doc
end

$config = config_doc['configuration']


Vagrant.configure(2) do |config|
  config.vm.box = "fedora/26-cloud-base"
  config.vm.define :vagrant_module_builder do |vagrant_host|
    vagrant_host.vm.provider :libvirt do |domain|
      domain.cpus = $config['cpus']
      mem = $config['memory']
      if mem < 1
        guest_memory = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 * $config['memory']
      else
        guest_memory = 1024 * $config['memory']
      end
      domain.memory = guest_memory
    end

    vagrant_host.vm.provision "shell", inline: $root_script, privileged: true
    vagrant_host.vm.provision "shell", inline: $user_script, privileged: false
  end

  config.vm.synced_folder(File.expand_path($config['folders']['modules']),
                          "/home/vagrant/modules",
                          **$config['folders']['mount_options'])
  config.vm.synced_folder(File.expand_path($config['folders']['modulebuild']),
                          "/home/vagrant/modulebuild",
                          **$config['folders']['mount_options'])
end
